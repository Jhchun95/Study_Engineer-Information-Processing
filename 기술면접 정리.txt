개발상식
객체 지향 프로그래밍이란 무엇인가?
절차지향 프로그래밍은 오로지 컴퓨터 관점에서의 프로그래밍 패러다임이라면 객체지향은 인간이 구분할 수 있는 요소를 객체로 표현한 인간 중심적 프로그래밍 패러다임이다. 객체는 기억장소와 이 기억장소의 값을 변경할 수 있는 연산의 집합이 정의되면 객체를 선언할 수 있다. 많은 객체 지향 언어에서 객체는 클래스로 그룹화 된다. 생성된 클래스로 객체의 특정 예를 생성하는데 이를 인스턴스라고 부른다. 객체 간의 정보 교환이 모두 메시지 교환을 통해 일어난다. 객체 지향 프로그래밍은 4가지 특징을 가진다.

추상화 : 공통된 특성을 파악하고 불필요한 특성은 제거한다.
캡슐화 : 객체는 상태와 동작을 가지며 객체 스스로 상태를 책임지도록 한다.
상속성 : 상위 객체를 상속 받을 수 있도록 한다.
다형성 : 동일한 요청에 다른 방식으로 처리할 수 있도록 한다.
함수형 프로그래밍이란?
함수형 프로그래밍은 순수 함수의 조합으로 소프트웨어를 설계하는 방식을 말한다. 순수 함수란 함수의 동작으로 인해 부수 효과(메모리의 값을 직접 수정하는 행위)가 발생하지 않는 함수를 말한다. 객체 지향 언어의 유일한 단점은 객체가 상태를 가지고 있으므로 프로그래머가 의도하지 않은 문제가 발생할 수 있다. 함수형 프로그래밍은 모든 입력이 새로운 출력을 가지며 부수 효과를 가지지 않으므로 입력값이 수정되지 않는다. 함수형 프로그래밍이 언제나 높은 효율을 보이는 것은 아니다. 상황에 따라 다르며 특히 맵리듀스를 해야하는 상황이라면 효율적이다.

REST API란 무엇인가?
REST는 자원(Resource), 행위(Verb), 표현(Representations)으로 구성된 API 아키택쳐이다. 웹의 장점과 HTTP의 우수성을 적극 활용할 수 있는 아키텍처로 URI를 통해서 자원을 명시하고 POST, GET, PUT, PATCH, DELETE등의 Method를 통해서 해당 자원의 행위를 지정한다. 코드의 재사용성을 높일 수 있으며 프론트엔드와 백엔드의 완전한 분업이 가능해지는 등 장점을 가진다.

TDD란 무엇이며 어떠한 장점이 있는가?
테스트 주도 개발(Test Driven Development), 테스트를 먼저 만들고 테스트를 통과하기 위한 코드를 작성하는 것을 의미하며 모듈화가 자연스럽게 잘 이루어지면서 개발이 진행된다. 테스트 커버리지가 높아져 리팩토링과 유지보수가 쉬워진다.

MVC 패턴이란 무엇인가?
모델(Model), 뷰(View), 컨트롤러(Controller)가 분리된 형태의 아키텍처이다. 세가지가 결합된 형태에서는 어플리케이션의 확장이 어렵다. 모델은 데이터 처리, 뷰는 사용자 인터페이스 처리, 컨트롤러는 비즈니스 로직을 처리하는 등 각각의 요소가 하나의 역할만 담당한다.

Git과 GitHub에 대해서
버전 관리를 위한 도구

Docker와 VM의 차이점
Dcoker는 하드웨어를 가상화하는 계층(Hyper-V)이 없으며, 호스트의 자원을 직접 이용하기 때문에 메모리 접근, 파일시스템, 네트워크 속도가 가상머신에 비해 월등히 빠르다.



자료구조
순차 자료구조 vs 연결 자료구조
순차 자료구조는 메모리 상에서 일렬로 나열된 데이터형이며 연결 자료구조는 메모리 상에서는 분산되어 있지만 하나의 노드가 다음 노드로 이어지는 포인터를 가지고 있어 연속적으로 접근이 가능한 데이터형이다. 삽입과 읽기를 비교해보면 아래와 같다.

데이터 삽입

순차 자료구조 : 마지막 인덱스에 데이터를 삽입하는 경우엔 항상 빠르다. 처음 혹은 중간에 삽입하는 경우 자리교환으로 인한 오버헤드가 발생하므로 느리다.
연결 자료구조 : 데이터를 어디에 삽입하던 해당 노드까지 엑세스하는 시간이 소요된다. 자료 추가시 연결된 노드의 링크만 교체하면 되므로 빠르다.
데이터 읽기

순차 자료구조 : 탐색하려는 위치를 알고 있다면 즉시 엑세스 할 수 있으므로 빠르다. 위치를 모른다고 하더라도 메모리 상에서 근접한 데이터의 접근이 더 빠르므로 연결 자료구조보다 빠르다.
연결 자료구조 : 위치를 알던 모르던 관계없이 헤더 혹은 테일부터 찾으려는 위치까지 탐색이 필요하며 메모리에서 노드가 분산되어 있으므로 순차 자료구조에 비해 느리다.
스택과 큐
스택은 가장 먼저들어 온 개체가 가장 마지막에 나가는(Last in first out, LIFO) 방식을 사용하는 자료구조이며 대부분은 펜케이크에 비유뙨다. 아래에서 위로 데이터를 쌓고 위에서 아래로 데이터를 지운다.
큐는 가장 먼저 들어온 개체가 가장 먼저 나가는(First in first out, FIFO) 방식을 사용하는 자료구조이며 대부분은 택시정거장에 비유된다. 뒤에서 데이터가 들어오고 앞으로 데이터가 지워진다.
트리
트리는 계층 구조로 구성된 자료구조이다. 트리의 모든 노드는 최대 하나의 부모 노드를 가진다. 부모 노드를 가지지 않는 최상위 노드를 루트 노드, 자식 노드가 없는 노드를 리프 노드라고 한다. 트리의 크기를 제한하면 트리의 연산이 단순해지고 명확해지는데 차수를 2개 이하로 정의한 것이 이진 트리이다. 이진 트리의 종류로는 스레드 이진 트리, 이진 탐색 트리, AVL 트리 등이 있다.

힙(Heap)
힙는 이진트리의 한 종류로 나열한 두 가지 조건이 성립하는 이진 트리를 의미한다.

완전 이진 트리여야 한다.
부모 노드와 자식 노드간에 크기 관계가 성립해야 한다.
루트 노드가 가장 크고 자식 노드가 부모 노드보다 작으면 최대 힙이라 부르고, 반대의 경우는 최소 힙이라 부른다. 힙은 최댓값과 최솟값에 접근하기 위해 사용하며 성능이 매우 빠르다.

그래프
정점과 에지로 이루어진 형태의 자료구조다. 에지의 방향성의 존재 유무에 따라서 유향 그래프와 무향 그래프로 분리되며, 에지가 가중치를 가지고 있다면 가중치 그래프라고 부른다. 그래프는 행렬과 연결리스트를 활용하여 구현할 수 있는데 행렬의 경우 정점의 존재 여부와 상관없이 항상 n^2의 공간 복잡도를 가진다.

해쉬
해쉬는 임의의 크기를 가진 데이터를 고정된 크기의 값으로 변환시키는 것을 말한다. 해쉬를 이용하여 임의의 데이터를 숫자로 변경하는 해쉬 함수를 정의하면 배열의 인덱스를 원하는 데이터 값으로 저장하거나 찾을 수 있다. 기존에는 탐색을 위한 시간이 소모됨에 반해 해쉬를 이용하면 즉시 데이터에 엑세스 할 수 있다. 단, 다른 입력이 같은 입력을 생성하는 현상을 해시 충돌이라고 하는데 해시 함수는 해시 충돌을 염두하여 구현하는 것이 중요하다.

